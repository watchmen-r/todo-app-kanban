{"version":3,"sources":["components/Header.tsx","components/TodoCard.tsx","components/TodoBox.tsx","App.tsx","index.tsx"],"names":["AddTask","styled","theme","position","borderRadius","shape","backgroundColor","alpha","palette","common","white","marginRight","spacing","width","display","justifyContent","breakpoints","up","down","margin","AddTaskIconWrapper","padding","height","pointerEvents","alignItems","AddTaskInputBase","InputBase","color","paddingLeft","transition","transitions","create","Header","todo","setTodo","handleTodo","handleClear","useState","isComposed","setIsComposed","Box","sx","flexGrow","AppBar","Toolbar","Typography","variant","noWrap","component","xs","sm","ml","fontWeight","placeholder","inputProps","value","onCompositionEnd","onCompositionStart","onChange","e","target","onKeyDown","key","Button","pr","pl","onClick","TodoCard","index","todos","setTodos","draggableId","id","toString","provided","snapshot","draggableProps","dragHandleProps","ref","innerRef","Card","minWidth","p","m","mt","IconButton","className","filter","TodoBox","progressTasks","setProgressTasks","completedTasks","setCompletedTasks","flexWrap","droppableId","droppableProps","Paper","elevation","fontSize","gutterBottom","map","progressTask","completedTask","App","useEffect","localTodos","localStorage","getItem","localProgress","localCompleted","JSON","parse","preventDefault","Date","now","isDone","setItem","stringify","onDragEnd","result","destination","source","console","log","add","active","progress","complete","splice","ReactDOM","render","StrictMode","document","getElementById","navigator","window","addEventListener","serviceWorker","register"],"mappings":"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","file":"static/js/main.c010b0a2.chunk.js","sourcesContent":["import * as React from \"react\";\nimport AppBar from \"@mui/material/AppBar\";\nimport { styled, alpha } from \"@mui/material/styles\";\nimport Box from \"@mui/material/Box\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport Typography from \"@mui/material/Typography\";\nimport Button from \"@mui/material/Button\";\nimport InputBase from \"@mui/material/InputBase\";\nimport AddTaskIcon from \"@mui/icons-material/AddTask\";\nimport { useState } from \"react\";\n\nconst AddTask = styled(\"div\")(({ theme }) => ({\n  position: \"relative\",\n  borderRadius: theme.shape.borderRadius,\n  backgroundColor: alpha(theme.palette.common.white, 0.15),\n  \"&:hover\": {\n    backgroundColor: alpha(theme.palette.common.white, 0.25),\n  },\n  marginRight: theme.spacing(2),\n  width: \"100%\",\n  display: 'flex',\n  justifyContent: 'space-between',\n  [theme.breakpoints.up(\"sm\")]: {\n    width: \"auto\",\n  },\n  [theme.breakpoints.down(\"md\")]: {\n    width: \"100%\",\n    margin: 0\n  }\n}));\n\nconst AddTaskIconWrapper = styled(\"div\")(({ theme }) => ({\n  padding: theme.spacing(0, 2),\n  height: \"100%\",\n  position: \"absolute\",\n  pointerEvents: \"none\",\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n}));\n\nconst AddTaskInputBase = styled(InputBase)(({ theme }) => ({\n  color: \"inherit\",\n  \"& .MuiInputBase-input\": {\n    padding: theme.spacing(1, 1, 1, 0),\n    // vertical padding + font size from searchIcon\n    paddingLeft: `calc(1em + ${theme.spacing(4)})`,\n    transition: theme.transitions.create(\"width\"),\n    width: \"100%\",\n    [theme.breakpoints.up(\"md\")]: {\n      width: \"auto\",\n    },\n    [theme.breakpoints.down(\"md\")]: {\n      width: \"10ch\",\n    }\n  },\n}));\n\ninterface Props {\n  todo: string;\n  setTodo: React.Dispatch<React.SetStateAction<string>>;\n  handleTodo: (e: React.FormEvent) => void;\n  handleClear: () => void;\n}\n\nexport const Header: React.FC<Props> = ({\n  todo,\n  setTodo,\n  handleTodo,\n  handleClear,\n}) => {\n  // 日本語を入力時、変換のためのEnterで反応しないようにするための状態管理用変数\n  const [isComposed, setIsComposed] = useState(false);\n\n  return (\n    <Box sx={{ flexGrow: 1 }}>\n      <AppBar position=\"static\" sx={{ backgroundColor: \"#6988A9\" }}>\n        <Toolbar sx={{ display: 'flex',\n  justifyContent: 'space-between'}}>\n          <Typography\n            variant=\"h6\"\n            noWrap\n            component=\"div\"\n            sx={{\n              display: { xs: \"none\", sm: \"block\" },\n              ml: 10,\n              fontWeight: 700,\n            }}\n          >\n            かんばんアプリ\n          </Typography>\n          <AddTask>\n            <AddTaskIconWrapper>\n              <AddTaskIcon />\n            </AddTaskIconWrapper>\n            <AddTaskInputBase\n              placeholder=\"タスク入力\"\n              inputProps={{ \"aria-label\": \"search\" }}\n              value={todo}\n              onCompositionEnd={() => setIsComposed(false)}\n              onCompositionStart={() => setIsComposed(true)}\n              onChange={(e) => setTodo(e.target.value)}\n              onKeyDown={(e) => {\n                if (isComposed) return;\n                if (e.key === \"Enter\") {\n                  handleTodo(e);\n                }\n              }}\n            />\n            <Box>\n              <Button\n                variant=\"text\"\n                sx={{ color: \"#f1f1f1\", pr: 0, pl: 0}}\n                onClick={(e) => {\n                  handleTodo(e);\n                }}\n              >\n                登録\n              </Button>\n              <Button\n                variant=\"text\"\n                sx={{ color: \"#f1f1f1\", pr: 0, pl: 0 }}\n                onClick={(e) => {\n                  handleClear();\n                }}\n              >\n                クリア\n              </Button>\n            </Box>\n          </AddTask>\n          <Box sx={{width: 180, display: { xs: \"none\", sm: \"block\" }}}>\n          </Box>\n        </Toolbar>\n      </AppBar>\n    </Box>\n  );\n};\n","import Typography from '@mui/material/Typography';\nimport Card from '@mui/material/Card';\nimport { Draggable } from 'react-beautiful-dnd';\nimport HighlightOffIcon from '@mui/icons-material/HighlightOff';\nimport { Box, IconButton } from '@mui/material';\n\ninterface Todo {\n  id: number;\n  todo: string;\n  isDone: boolean;\n}\n\ntype Props = {\n  index: number;\n  todo: Todo;\n  todos: Todo[];\n  setTodos: React.Dispatch<React.SetStateAction<Todo[]>>;\n};\n\nconst TodoCard = ({ index, todo, todos, setTodos }: Props) => {\n  // 削除アイコンを押した時\n  const handleDelete = (id: number) => {\n    setTodos(todos.filter((todo) => todo.id !== id));\n  };\n  \n  // Draggableは、draggableIdはユニークなものを入れる、そして関数で囲む\n  return (\n    <Draggable draggableId={todo.id.toString()} index={index}>\n      {(provided, snapshot) => (\n        <div {...provided.draggableProps} {...provided.dragHandleProps} ref={provided.innerRef} >\n          <Card sx={{ minWidth: 275, backgroundColor: \"#6988A9\" }} >\n            <Box\n              sx={{\n                display: 'flex',\n                justifyContent: 'space-between',\n                p: 1,\n                m: 1,\n                backgroundColor: \"#6988A9\" \n              }}\n            >\n              <Typography variant=\"h6\" component=\"div\" sx={{mt: 0.5, color: \"#f1f1f1\" }}>\n                {todo.todo}\n              </Typography>\n                \n              <IconButton className=\"icon\" onClick={() => handleDelete(todo.id)}>\n                <HighlightOffIcon />\n              </IconButton>\n            </Box>\n          </Card>\n        </div>\n      )}\n    </Draggable>\n  )\n}\n\nexport default TodoCard;","import React from \"react\";\nimport Typography from \"@mui/material/Typography\";\nimport Box from \"@mui/material/Box\";\nimport Paper from \"@mui/material/Paper\";\nimport TodoCard from \"./TodoCard\";\nimport { Droppable } from \"react-beautiful-dnd\";\n\ninterface Todo {\n  id: number;\n  todo: string;\n  isDone: boolean;\n}\n\ninterface props {\n  todos: Array<Todo>;\n  setTodos: React.Dispatch<React.SetStateAction<Array<Todo>>>;\n  progressTasks: Array<Todo>;\n  setProgressTasks: React.Dispatch<React.SetStateAction<Array<Todo>>>;\n  completedTasks: Array<Todo>;\n  setCompletedTasks: React.Dispatch<React.SetStateAction<Array<Todo>>>;\n}\n\nconst TodoBox: React.FC<props> = ({\n  todos,\n  setTodos,\n  progressTasks,\n  setProgressTasks,\n  completedTasks,\n  setCompletedTasks\n}) => {\n  // Droppableの中は関数にして、refやスプレッド構文を下記のように追加しないといけない\n  return (\n    <>\n      <Box\n        sx={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          flexWrap: \"wrap\",\n          \"& > :not(style)\": {\n            m: 3,\n            width: 300,\n            height: 300,\n          },\n        }}\n      >\n        <Droppable droppableId=\"TodosList\">\n          {(provided, snapshot) => (\n            <div ref={provided.innerRef} {...provided.droppableProps}>\n              <Paper elevation={3}>\n                <Box sx={{ p: 1 }}>\n                  <Typography\n                    sx={{ fontSize: 20, m: 2, fontWeight: 700 }}\n                    color=\"text.secondary\"\n\n                    gutterBottom\n                  >\n                    未処理\n                  </Typography>\n                </Box>\n                {todos.map((todo, index) => (\n                  <Box sx={{ p: 1 }}>\n                    <TodoCard index={index} todo={todo} todos={todos} setTodos={setTodos} />\n                  </Box>\n                ))}\n                {provided.placeholder}\n              </Paper>\n            </div>\n          )}\n        </Droppable>\n        <Droppable droppableId=\"ProgressList\">\n          {(provided, snapshot) => (\n            <div ref={provided.innerRef} {...provided.droppableProps}>\n              <Paper elevation={3}>\n                <Box sx={{ p: 1 }}>\n                  <Typography\n                    sx={{ fontSize: 20, m: 2, fontWeight: 700 }}\n                    color=\"text.secondary\"\n                    gutterBottom\n                  >\n                    進行中\n                  </Typography>\n                </Box>\n                {progressTasks.map((progressTask, index) => (\n                  <Box sx={{ p: 1 }}>\n                    <TodoCard index={index} todo={progressTask} todos={progressTasks} setTodos={setProgressTasks} />\n                  </Box>\n                ))}\n                {provided.placeholder}\n              </Paper>\n            </div>\n          )}\n        </Droppable>\n        <Droppable droppableId=\"CompletedList\">\n          {(provided, snapshot) => (\n            <div ref={provided.innerRef} {...provided.droppableProps}>\n              <Paper elevation={3}>\n                <Box sx={{ p: 1 }}>\n                  <Typography\n                    sx={{ fontSize: 20, m: 2, fontWeight: 700 }}\n                    color=\"text.secondary\"\n                    gutterBottom\n                  >\n                    完了\n                  </Typography>\n                </Box>\n                {completedTasks.map((completedTask, index) => (\n                  <Box sx={{ p: 1 }}>\n                    <TodoCard index={index} todo={completedTask} todos={completedTasks} setTodos={setCompletedTasks}/>\n                  </Box>\n                ))}\n                {provided.placeholder}\n              </Paper>\n            </div>\n          )}\n        </Droppable>\n      </Box>\n    </>\n  );\n};\n\nexport default TodoBox;\n","import React, { useEffect, useState } from \"react\";\n\nimport { Header } from \"./components/Header\";\nimport TodoBox from \"./components/TodoBox\";\nimport { DragDropContext, DropResult } from \"react-beautiful-dnd\";\n\ninterface Todo {\n  id: number;\n  todo: string;\n  isDone: boolean;\n}\n\nfunction App() {\n  const [todo, setTodo] = useState<string>(\"\");\n  const [todos, setTodos] = useState<Array<Todo>>([]);\n  const [progressTasks, setProgressTasks] = useState<Array<Todo>>([]);\n  const [completedTasks, setCompletedTasks] = useState<Array<Todo>>([]);\n\n  useEffect(() => {\n    const localTodos = localStorage.getItem(\"localTodos\");\n    const localProgress = localStorage.getItem(\"localProgress\");\n    const localCompleted = localStorage.getItem(\"localCompleted\");\n\n    if (localTodos !== null) setTodos(JSON.parse(localTodos));\n    if (localProgress !== null) setProgressTasks(JSON.parse(localProgress));\n    if (localCompleted !== null) setCompletedTasks(JSON.parse(localCompleted));\n  }, []);\n\n  const handleTodo = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (todo) {\n      // TODO IDの管理はUIDを使いたい\n      setTodos([...todos, { id: Date.now(), todo, isDone: false }]);\n      setTodo(\"\");\n    }\n  };\n\n  const handleClear = () => {\n    setTodo(\"\");\n    setTodos([]);\n    setProgressTasks([]);\n    setCompletedTasks([]);\n    localStorage.setItem(\"localTodos\", JSON.stringify([]));\n    localStorage.setItem(\"localProgress\", JSON.stringify([]));\n    localStorage.setItem(\"localCompleted\", JSON.stringify([]));\n  }\n\n  // アイテムがドロップされた時に呼び出される\n  // ここでstateを更新する\n  const onDragEnd = (result: DropResult) => {\n    const { destination, source } = result;\n    // resultにDroppableで設定したdrappableIdが入っているので、\n    // これを用いてデータを操作する\n    console.log(result);\n\n    if (!destination) {\n      return;\n    }\n\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return;\n    }\n\n    let add;\n    let active = todos;\n    let progress = progressTasks;\n    let complete = completedTasks;\n\n    // 移動元の配列を操作\n    if (source.droppableId === \"TodosList\") {\n      add = active[source.index];\n      active.splice(source.index, 1);\n    } else if (source.droppableId === \"ProgressList\") {\n      add = progress[source.index];\n      progress.splice(source.index, 1);\n    } else {\n      add = complete[source.index];\n      complete.splice(source.index, 1);\n    }\n\n    // 移動先の配列を操作\n    if (destination.droppableId === \"TodosList\") {\n      active.splice(destination.index, 0, add);\n    } else if (destination.droppableId === \"ProgressList\") {\n      progress.splice(destination.index, 0, add);\n    } else {\n      complete.splice(destination.index, 0, add);\n    }\n\n    setTodos(active);\n    setProgressTasks(progress);\n    setCompletedTasks(complete);\n\n    localStorage.setItem(\"localTodos\", JSON.stringify(active));\n    localStorage.setItem(\"localProgress\", JSON.stringify(progress));\n    localStorage.setItem(\"localCompleted\", JSON.stringify(complete));\n  };\n\n\n  return (\n    <>\n      <Header todo={todo} setTodo={setTodo} handleTodo={handleTodo} handleClear={handleClear} />\n      <DragDropContext onDragEnd={onDragEnd}>\n        <TodoBox\n          todos={todos}\n          setTodos={setTodos}\n          progressTasks={progressTasks}\n          setProgressTasks={setProgressTasks}\n          completedTasks={completedTasks}\n          setCompletedTasks={setCompletedTasks}\n        />\n      </DragDropContext>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nif (\"serviceWorker\" in navigator) {\n  window.addEventListener(\"load\", () => {\n    navigator.serviceWorker.register(\"./sw.js\");\n  });\n}\n"],"sourceRoot":""}